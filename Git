* 𝑮𝒊𝒕 𝑪𝒐𝒎𝒎𝒂𝒏𝒅𝒔 : 

Git VS GitHub :

Git is a distributed version control system that tracks changes to the code file, enabling collaboration and history tracking.


GitHub :

GitHub is a web-based platform that hosts Git repositories, providing additional collaboration features like pull requests, issue tracking, and project management tools.


1. git init: Initialize a new Git repository in our project directory. The starting point of version control.

2. git clone <repository>: Clone a repository into a new directory. Get a copy of an existing Git repository.

3. git add <file> and git add.: Stage changes for commit. The first adds a specific file, while the second adds all changes.

4. git commit -m "our message": Commit staged changes with a descriptive message. Capture the state of your project at a specific point.

5. git status: Check the status of your working directory. View modified, added, and untracked files.

6. git branch: List existing branches. See which branch you are on with an asterisk.
 
7. git checkout -b <branch>: Create and switch to a new branch. Keep your changes isolated from the main code base.

8. git merge <branch>: Combines changes from one branch into another by creating a new commit called a merge commit.

9. git pull: It downloads changes from the remote and immediately merges them into your current branch. git fetch + git merge

10. git push: Upload our local changes to a remote repository. Share our work with the rest of the team.

11. git log: View the commit history. Understand who made changes and when.

12. git diff: See the differences between your working directory and the last commit. Useful for reviewing changes before committing.

13. git stash: Temporarily save changes without committing. Useful when you need to switch branches but don't want to commit incomplete work.

14 git remote -v : List remote repositories. See the URLs of remote repositories connected to our local project.

15 git fetch : Downloads new commits, branches, and tags from the remote without merging into your local branch.

git rebase : Moves your branch’s commits to the top of another branch by 𝐫𝐞𝐰𝐫𝐢𝐭𝐢𝐧𝐠 𝐜𝐨𝐦𝐦𝐢𝐭 𝐡𝐢𝐬𝐭𝐨𝐫𝐲 to create a clean, linear sequence of commits.
